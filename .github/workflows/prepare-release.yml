name: Open release

on:
  push:
    branches:
      # Matches release branches
      - "[0-9]+.[0-9]+"

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  prepare:
    name: Prepare release with Changesets
    runs-on: ubuntu-22.04
    outputs:
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
      - name: Install Dependencies
        run: npm ci
      - name: Publishing version
        uses: changesets/action@d89c1de63c7f28ac47ec85ed395f5f1d045d4697 # v1.4.4
        id: changesets
        with:
          title: "Prepare release ${{ github.ref_name }}"
          commit: "Release ${{ github.ref_name }}"
          publish: "npm run release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wait-for-deployment:
    name: Wait for deployment to finish and create checks in release prepare release PR
    needs: prepare
    if: needs.prepare.outputs.hasChangesets == 'true'
    runs-on: ubuntu-22.04
    outputs:
      MINOR_VERSION: ${{ env.MINOR_VERSION }}
      CUSTOM_VERSION: ${{ env.CUSTOM_VERSION || env.VERSION }}
      DEPLOY_STATUS: ${{ steps.wait-for-deploy.outputs.checkStatus }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Get version and custom version
        id: get-versions
        env:
          VERSION: ${{ github.event.inputs.git_ref || github.ref_name }}
        run: |
          set -x
          minor_version=$(echo $VERSION | sed -n 's#\([0-9]\+\).\([0-9]\+\).*#\1.\2#p')
          echo "MINOR_VERSION=${minor_version}" >> $GITHUB_ENV

          set -x
          HASH=$(git rev-parse --short HEAD)
          CURRENT_VERSION=$(jq -r .version package.json)
          RELEASE="${CURRENT_VERSION}-${HASH}"
          echo "CUSTOM_VERSION=${RELEASE}" >> $GITHUB_ENV
      
      - name: Create check in prepare release PR
        if: ${{ steps.check-framework.TEST_FRAMEWORK }} == playwright
        id: create-check
        uses: ./.github/actions/checks/create-pull-request-check
        with:
          PR_HEAD: "changeset-release/${{env.MINOR_VERSION}}"
          CHECK_NAME: "Deploy_staging"
          STATUS: "in_progress"
          TITLE: "Deploy staging"
          DETAILS_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Wait for deployment
        id: wait-for-deploy
        continue-on-error: true
        env:
          HEAD_SHA: ${{ github.sha }}
          GH_TOKEN: ${{ github.token }}
        run: 
          node .github/workflows/checkIfDeploymentFinished.js \
            --head_sha "$HEAD_SHA" \
            --github_token "$GH_TOKEN"

      - name: Update check
        if: always() && ${{ steps.create-check.outputs.CHECK_ID }}
        uses: ./.github/actions/checks/update-pull-request-check
        with:
          CHECK_ID: ${{ steps.create-check.outputs.CHECK_ID }}
          CHECK_NAME: "Deploy_staging"
          STATUS: "${{ steps.wait-for-deploy.outputs.checkStatus }}"
          CONCLUSION: "${{ steps.wait-for-deploy.outputs.checkConclusion }}"
          TITLE: "Deploy staging"
          SUMMARY: "${{ steps.wait-for-deploy.outputs.checkMessage }}"
          DETAILS_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"


  run-tests-on-release:
    needs: [wait-for-deployment, prepare]
    if: needs.prepare.outputs.hasChangesets == 'true' && needs.wait-for-deployment.DEPLOY_STATUS == 'success'
    uses: ./.github/workflows/run-tests-on-release.yml
    with:
      VERSION: ${{ needs.wait-for-deployment.MINOR_VERSION }} # eg. "3.19"
      CUSTOM_VERSION: ${{ needs.wait-for-deployment.CUSTOM_VERSION }} # eg. "3.19.4-5a41d18"
    secrets: inherit
      
  release:
    name: Deploy and release to sandbox
    needs: prepare
    if: needs.prepare.outputs.hasChangesets == 'false'
    runs-on: ubuntu-22.04
    env:
      API_URI: /graphql/
      APP_MOUNT_URI: /dashboard/
      STATIC_URL: /dashboard/static/
      SENTRY_ORG: saleor
      SENTRY_PROJECT: dashboard
      SENTRY_URL_PREFIX: "~/dashboard/static"
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      APPS_MARKETPLACE_API_URI: "https://apps.staging.saleor.io/api/v2/saleor-apps"
      VERSION: ${{ github.event.inputs.git_ref || github.ref_name }}
      IS_CLOUD_INSTANCE: true
      POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}
      POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set environment
        # Convert version into staging deployment name (e.g 3.3.0 -> saleor-staging-v33)
        run: |
          set -x
          environment=$(echo $VERSION | sed -n 's#\([0-9]\+\).\([0-9]\+\).*#saleor-staging-v\1\2#p')
          echo "ENVIRONMENT=${environment}" >> $GITHUB_ENV

      - name: Set sentry release
        run: |
          HASH=$(git rev-parse --short HEAD)
          VERSION=$(jq -r .version package.json)
          echo "SENTRY_RELEASE=${VERSION}-${HASH}" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
      - name: Install Dependencies
        run: npm ci
      - name: Build
        run: |
          npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_CLOUD_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CLOUD_STAGING_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy
        run: |
          aws s3 sync build/dashboard "s3://${DEPLOYMENT_BUCKET}/${ENVIRONMENT}/static/"
          aws s3 cp build/dashboard/index.html "s3://${DEPLOYMENT_BUCKET}/${ENVIRONMENT}/"

          IFS=',' read -ra DISTRIBUTIONS_ARRAY <<< "${CDN_DISTRIBUTIONS}"
          for DISTRIBUTION in "${DISTRIBUTIONS_ARRAY[@]}"; do
            echo "::add-mask::$DISTRIBUTION"
            for i in {1..3}; do aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION" --paths "/dashboard*" && break || sleep 5; done
          done
        env:
          DEPLOYMENT_BUCKET: ${{ secrets.AWS_CLOUD_STAGING_DEPLOYMENT_BUCKET }}
          CDN_DISTRIBUTIONS: ${{ secrets.AWS_CLOUD_STAGING_CDN_DISTRIBUTIONS }}

      - name: Prepare Sandbox release pull request
        run: |
          export GITHUB_TOKEN=$( \
            curl --request GET --url ${{ secrets.VAULT_URL}} --header "Authorization: JWT ${{ secrets.VAULT_JWT }}" | jq -r .token \
          )

          version=$(cat package.json | jq -r .version)
          payload=$(jq --null-input --arg version "$version" '{
            "event_type": "open-release-pull-request",
            "client_payload": {
              "project": "DASHBOARD",
              "environment": "SANDBOX",
              "version": $version
            }
          }')

          gh api /repos/saleor/saleor-cloud-deployments/dispatches --input - <<< $payload
